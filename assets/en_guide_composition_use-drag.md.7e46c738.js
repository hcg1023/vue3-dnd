import{_ as o,c as a,o as c,P as n,b as t,j as e}from"./app.6e11e860.js";const _='{"title":"useDrag","description":"","frontmatter":{},"headers":[{"level":2,"title":"parameters","slug":"parameters"},{"level":2,"title":"return value","slug":"return-value"},{"level":3,"title":"Specification object","slug":"specification-object"}],"relativePath":"en/guide/composition/use-drag.md"}',s={},i=n('<h1 id="usedrag" tabindex="-1">useDrag <a class="header-anchor" href="#usedrag" aria-hidden="true">#</a></h1><p>The <code>useDrag</code> function provides a way to connect your component to DnD as a drag source. It receives a <code>Specification</code>, you can specify the type of dragging through <code>type</code>, the data of the drag source through <code>item</code>, get the drag status through <code>collect</code>, and so on.</p><p><code>useDrag</code> returns three values: the return value of the <code>collect</code> function, the connector functions of <code>dragSource</code> and <code>dragPreview</code>.</p>',3),d=t("div",{class:"language-vue"},[t("pre",null,[t("code",null,[t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),e("script")]),e(),t("span",{class:"token attr-name"},"setup"),e(),t("span",{class:"token attr-name"},"lang"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),e("ts"),t("span",{class:"token punctuation"},'"')]),t("span",{class:"token punctuation"},">")]),t("span",{class:"token script"},[t("span",{class:"token language-javascript"},[e(`
`),t("span",{class:"token keyword"},"import"),e(),t("span",{class:"token punctuation"},"{"),e(" useDrag "),t("span",{class:"token punctuation"},"}"),e(),t("span",{class:"token keyword"},"from"),e(),t("span",{class:"token string"},"'vue3-dnd'"),e(`

`),t("span",{class:"token keyword"},"const"),e(),t("span",{class:"token punctuation"},"["),e("collectedProps"),t("span",{class:"token punctuation"},","),e(" dragSource"),t("span",{class:"token punctuation"},","),e(" dragPreview"),t("span",{class:"token punctuation"},"]"),e(),t("span",{class:"token operator"},"="),e(),t("span",{class:"token function"},"useDrag"),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},")"),e(),t("span",{class:"token operator"},"=>"),e(),t("span",{class:"token punctuation"},"("),t("span",{class:"token punctuation"},"{"),e(`
`),t("span",{class:"token literal-property property"},"type"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token string"},"'BOX'"),t("span",{class:"token punctuation"},","),e(`
`),t("span",{class:"token literal-property property"},"item"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token punctuation"},"{"),e(),t("span",{class:"token literal-property property"},"id"),t("span",{class:"token operator"},":"),e(),t("span",{class:"token string"},"'1'"),e(),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},","),e(`
`),t("span",{class:"token punctuation"},"}"),t("span",{class:"token punctuation"},")"),t("span",{class:"token punctuation"},")"),e(`
`)])]),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),e("script")]),t("span",{class:"token punctuation"},">")]),e(`

`),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),e("template")]),t("span",{class:"token punctuation"},">")]),e(`
`),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),e("div")]),e(),t("span",{class:"token attr-name"},"v-if"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),e("collectedProps.isDragging"),t("span",{class:"token punctuation"},'"')]),e(),t("span",{class:"token attr-name"},":ref"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),e("dragPreview"),t("span",{class:"token punctuation"},'"')]),t("span",{class:"token punctuation"},">")]),e("dragPreview"),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),e("div")]),t("span",{class:"token punctuation"},">")]),e(`
`),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"<"),e("div")]),e(),t("span",{class:"token attr-name"},"v-else"),e(),t("span",{class:"token attr-name"},":ref"),t("span",{class:"token attr-value"},[t("span",{class:"token punctuation attr-equals"},"="),t("span",{class:"token punctuation"},'"'),e("dragSource"),t("span",{class:"token punctuation"},'"')]),t("span",{class:"token punctuation"},">")]),e("dragSource"),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),e("div")]),t("span",{class:"token punctuation"},">")]),e(`
`),t("span",{class:"token tag"},[t("span",{class:"token tag"},[t("span",{class:"token punctuation"},"</"),e("template")]),t("span",{class:"token punctuation"},">")]),e(`
`)]),t("div",{class:"m-mdic-copy-wrapper"},[t("div",{class:"u-mdic-copy-notify",id:"j-notify-1679013897495-87914"},"copy success"),t("button",{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":`<script setup lang="ts">
import { useDrag } from 'vue3-dnd'

const [collectedProps, dragSource, dragPreview] = useDrag(() => ({
type: 'BOX',
item: { id: '1' },
}))
<\/script>

<template>
<div v-if="collectedProps.isDragging" :ref="dragPreview">dragPreview</div>
<div v-else :ref="dragSource">dragSource</div>
</template>
`,"data-mdic-attach-content":"","data-mdic-notify-id":"j-notify-1679013897495-87914","data-mdic-notify-delay":"2000","data-mdic-copy-fail-text":"copy fail",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"},"copy")])])],-1),l=n('<h2 id="parameters" tabindex="-1">parameters <a class="header-anchor" href="#parameters" aria-hidden="true">#</a></h2><p>The parameter of <code>useDrag</code> can be a <code>Specification</code> object or a function that returns a <code>Specification</code> object. For more information about <code>Specification</code>, please refer to <a href="#specification-object">Specification</a>.</p><h2 id="return-value" tabindex="-1">return value <a class="header-anchor" href="#return-value" aria-hidden="true">#</a></h2><p><code>useDrag</code> returns an array containing three values: the return value of the <code>collect</code> function, the connector functions of <code>dragSource</code> and <code>dragPreview</code></p>',4),r=t("ul",null,[t("li",null,[t("p",null,[t("code",null,"[0] - Collected Props")]),t("ul",null,[t("li",null,[t("div",{class:"language-ts"},[t("pre",null,[t("code",null,`Ref<object>
`),t("div",{class:"m-mdic-copy-wrapper"},[t("div",{class:"u-mdic-copy-notify",id:"j-notify-1679013897496-34562"},"copy success"),t("button",{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":`Ref<object>
`,"data-mdic-attach-content":"","data-mdic-notify-id":"j-notify-1679013897496-34562","data-mdic-notify-delay":"2000","data-mdic-copy-fail-text":"copy fail",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"},"copy")])])])]),t("li",null,[e("It is a "),t("code",null,"Ref"),e(" object, its "),t("code",null,"value"),e(" points to the return value of the "),t("code",null,"collect"),e(" function, if the "),t("code",null,"collect"),e(" function is not defined, its "),t("code",null,"value"),e(" is an empty object")])])]),t("li",null,[t("p",null,[t("code",null,"[1] - DragSource Connector")]),t("ul",null,[t("li",null,[t("div",{class:"language-ts"},[t("pre",null,[t("code",null,`(el: Ref<HTMLElement> | HTMLElement, options?: DragSourceOptions) => HTMLElement
`),t("div",{class:"m-mdic-copy-wrapper"},[t("div",{class:"u-mdic-copy-notify",id:"j-notify-1679013897497-19083"},"copy success"),t("button",{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":`(el: Ref<HTMLElement> | HTMLElement, options?: DragSourceOptions) => HTMLElement
`,"data-mdic-attach-content":"","data-mdic-notify-id":"j-notify-1679013897497-19083","data-mdic-notify-delay":"2000","data-mdic-copy-fail-text":"copy fail",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"},"copy")])])])]),t("li",null,[e("Drag and drop the source's connector function. "),t("strong",null,"It must be called"),e(", and pass a draggable DOM element of "),t("code",null,"Ref<HTMLElement> | HTMLElement"),e(";")]),t("li",null,"The second parameter is an options object, which is consistent with the options of the Specification object")])]),t("li",null,[t("p",null,[t("code",null,"[2] - DragPreview Connector")]),t("ul",null,[t("li",null,[t("div",{class:"language-ts"},[t("pre",null,[t("code",null,`(el: Ref<HTMLElement> | HTMLElement, options?: DragPreviewOptions) => HTMLElement
`),t("div",{class:"m-mdic-copy-wrapper"},[t("div",{class:"u-mdic-copy-notify",id:"j-notify-1679013897498-28654"},"copy success"),t("button",{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":`(el: Ref<HTMLElement> | HTMLElement, options?: DragPreviewOptions) => HTMLElement
`,"data-mdic-attach-content":"","data-mdic-notify-id":"j-notify-1679013897498-28654","data-mdic-notify-delay":"2000","data-mdic-copy-fail-text":"copy fail",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"},"copy")])])])]),t("li",null,[e("Drag and drop previewed connector functions. It is optional, "),t("strong",null,"default uses dragSource as preview element"),e(", receives a draggable DOM element of "),t("code",null,"Ref<HTMLElement> | HTMLElement"),e(";")]),t("li",null,"The second parameter is an options object, which is consistent with the previewOptions of the Specification object")])])],-1),p=n('<h3 id="specification-object" tabindex="-1">Specification object <a class="header-anchor" href="#specification-object" aria-hidden="true">#</a></h3><p>Before understanding the basic usage of the <code>Specification</code> object, you may need to understand the <a href="./../monitors/drag-source-monitor.html">DragSourceMonitor</a> object first.</p><table><thead><tr><th>Key</th><th>Required</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>type</td><td>is</td><td><code>string | symbol</code></td><td>type of dragged element</td></tr><tr><td>item</td><td>is</td><td><code>object | () =&gt; object</code></td><td>object, it is a plain JavaScript object describing the dragged data. <br>This is the only information available about the drag source for the drag target, so it&#39;s important to choose the minimum data they need to know. You might be tempted to place a complex reference here, but you should try to avoid doing so as it couples the drag source and drop target. It&#39;s a good idea to use something like <code>{ id }</code>. <br> function, it is fired when the drag operation begins and returns an object representing the drag operation. If <code>null</code> is returned, the drag operation is canceled.</td></tr><tr><td>collect</td><td>no</td><td><code>(monitor: DragSourceMonitor) =&gt; CollectedProps</code></td><td>A function for a collector. It should return a plain object and be the first item in the return value of <code>useDrag</code>.</td></tr><tr><td>previewOptions</td><td>no</td><td><code>DragPreviewOptions</code></td><td>A plain JavaScript object describing drag preview options.</td></tr><tr><td>options</td><td>no</td><td><code>DragSourceOptions</code></td><td>A plain object, optionally containing any of the following properties: <br><code>dropEffect</code>: optional, the type of drop effect used in this drag. Optional values: <code>&#39;move&#39; | &#39;copy&#39;</code></td></tr><tr><td>end</td><td>no</td><td><code>(draggedItem: object, monitor: DragSourceMonitor) =&gt; void</code></td><td>The <code>end</code> function is called when the dragging stops. <br>You can call <code>monitor.didDrop()</code> to check if the drop was successful; if it was successful, and the drop target specifies the drop result by returning a plain object from its <code>drop()</code> method, then it will As the return value of <code>monitor.getDropResult()</code>. <br>This method is a good place to handle data changes.</td></tr><tr><td>canDrag</td><td>no</td><td><code>boolean | (monitor: DragSourceMonitor) =&gt; boolean</code></td><td>You can use this to specify whether dragging is currently allowed. Defaults to <code>true</code>. <br>Specifying a function is convenient if you want to disable dragging based on some condition. <br>Note: You cannot call <code>monitor.canDrag()</code> inside this method.</td></tr><tr><td>isDragging</td><td>no</td><td><code>boolean | (monitor: DragSourceMonitor) =&gt; boolean</code></td><td>By default, only the drag source that initiated the drag operation is considered to be dragged. <br>You can override this behavior by defining a custom <code>isDragging</code> method. It may return something like <code>props.id === monitor.getItem().id</code>. <br>Note: You cannot call <code>monitor.isDragging()</code> inside this method.</td></tr></tbody></table>',3),u=[i,d,l,r,p];function m(g,h,y,f,k,b){return c(),a("div",null,u)}var T=o(s,[["render",m]]);export{_ as __pageData,T as default};
