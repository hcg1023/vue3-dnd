import{_ as e,c as t,o as d,O as o}from"./app.e83eb941.js";const m='{"title":"DragLayerMonitor","description":"","frontmatter":{},"headers":[{"level":2,"title":"method","slug":"method"}],"relativePath":"en/guide/monitors/drag-layer-monitor.md"}',r={},n=o('<h1 id="draglayermonitor" tabindex="-1">DragLayerMonitor <a class="header-anchor" href="#draglayermonitor" aria-hidden="true">#</a></h1><p><code>DragLayerMonitor</code> is the object passed to the <code>DragLayer</code> drag layer <code>collect</code> collection function. It provides methods that allow you to get global drag and drop state information.</p><h2 id="method" tabindex="-1">method <a class="header-anchor" href="#method" aria-hidden="true">#</a></h2><table><thead><tr><th>method name</th><th>type</th><th>description</th></tr></thead><tbody><tr><td><code>isDragging()</code></td><td><code>() =&gt; boolean</code></td><td>If a drag operation is in progress and the owner is being dragged, or the <code>isDragging()</code> method of <code>useDrag</code> returns <code>true</code>, this method will Will return <code>true</code>, otherwise return <code>false</code>.</td></tr><tr><td><code>getItemType()</code></td><td><code>() =&gt; (string | null)</code></td><td>Returns the type <code>type</code> that identifies the currently dragged item. Returns <code>null</code> if no item was dragged.</td></tr><tr><td><code>getItem()</code></td><td><code>() =&gt; (object | null)</code></td><td>Returns a plain object representing the currently dragged item. Each drag source must be specified by specifying it from its <code>item</code> property. Returns <code>null</code> if no item was dragged.</td></tr><tr><td><code>getInitialClientOffset()</code></td><td><code>() =&gt; { x: number, y: number }</code></td><td>Returns the initial position <code>{x, y}</code> of the mouse pointer relative to the client at the start of the current drag. <br>Returns null if no item was dragged.</td></tr><tr><td><code>getInitialSourceClientOffset()</code></td><td><code>() =&gt; { x: number, y: number }</code></td><td>Returns the initial position of the root DOM node of the drag source relative to the client when the current drag starts <code>{x, y}</code> . <br>Returns null if no item was dragged.</td></tr><tr><td><code>getClientOffset()</code></td><td><code>() =&gt; { x: number, y: number }</code></td><td>Returns the offset of the mouse pointer relative to the client in the current drag <code>{x, y}</code>. <br>Returns null if no item was dragged.</td></tr><tr><td><code>getDifferenceFromInitialOffset()</code></td><td><code>() =&gt; { x: number, y: number }</code></td><td>Returns the offset of the mouse pointer in the current drag relative to the mouse pointer position when the drag started <code>{x, y} </code>. <br>Returns null if no item was dragged.</td></tr><tr><td><code>getSourceClientOffset()</code></td><td><code>() =&gt; { x: number, y: number }</code></td><td>Returns the offset <code>{x, y}</code> of the root DOM node of the current drag source relative to the client. <br>Returns null if no item was dragged.</td></tr></tbody></table>',4),a=[n];function i(c,s,l,g,h,u){return d(),t("div",null,a)}var p=e(r,[["render",i]]);export{m as __pageData,p as default};
