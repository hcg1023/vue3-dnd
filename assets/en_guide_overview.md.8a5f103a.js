import{_ as a,c as o,o as s,P as n,b as e,j as t}from"./app.6e11e860.js";const _='{"title":"Overview","description":"","frontmatter":{},"headers":[{"level":2,"title":"Items and Types","slug":"items-and-types"},{"level":2,"title":"Monitors","slug":"monitors"},{"level":2,"title":"Connectors","slug":"connectors"},{"level":2,"title":"Drag Sources and Drop Targets","slug":"drag-sources-and-drop-targets"},{"level":2,"title":"Backend","slug":"backend"},{"level":2,"title":"in conclusion","slug":"in-conclusion"}],"relativePath":"en/guide/overview.md"}',c={},i=n('<h1 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-hidden="true">#</a></h1><p>In this chapter we will introduce the basic concepts of React DnD</p><hr><p>React DnD is different from most drag and drop libraries and can be intimidating if you&#39;ve never used it before. However, it starts to make sense once you understand some of the concepts at the heart of its design. I recommend that you read these concepts before reading the rest of the documentation.</p><p>Some of these concepts are similar to Flux and Redux architecture. This is no coincidence since React DnD uses Redux internally.</p><h2 id="items-and-types" tabindex="-1">Items and Types <a class="header-anchor" href="#items-and-types" aria-hidden="true">#</a></h2><p>React DnD uses data instead of views as a drag-and-drop implementation. When you drag something on the screen, we don&#39;t say a component or DOM node is being dragged. Instead, we say that an <strong>item</strong> of some <strong>type</strong> is being dragged.</p><p>What is a project? Items are plain JavaScript objects that describe what is being dragged. For example, in a Kanban application, when you drag a card, an item might look like <code>{ cardId: 42 }</code>, in a game of chess, when you pick up a piece, the item might look like <code>{ fromCell: &#39;C5&#39;, piece: &#39;queen&#39; }</code>, describing the dragged data as a plain object can help you keep your components decoupled and unaware of each other.</p><p>So what are types? A type is a string (or a symbol) that uniquely identifies a whole class of items in an application. In a Kanban application, you might have a <code>&#39;card&#39;</code> type for draggable cards and a <code>&#39;list&#39;</code> type for draggable lists of those cards. In chess, you may have only one type of <code>&#39;piece&#39;</code>.</p><p>Types are useful because as the item gets bigger, you may want more things to be draggable, but you don&#39;t necessarily want all existing drop targets to suddenly receive new item placements. Type lets you specify the drop source and drop target.</p><h2 id="monitors" tabindex="-1">Monitors <a class="header-anchor" href="#monitors" aria-hidden="true">#</a></h2><p>Drag and drop is stateful in nature. A drag operation is in progress, or not. Either there is a current type and a current item, or it doesn&#39;t. This state has to exist somewhere.</p><p>For each component that needs to track the drag and drop state, you can define a collection function that pulls the state from the monitor.</p><p>Suppose you want to highlight the <code>Cell</code> cells that are allowed to be placed while dragging the pawn, the collection function of the component <code>Cell</code> might look like this:</p>',14),d=e("div",{class:"language-ts"},[e("div",{class:"highlight-lines"},[e("br"),e("br"),e("br"),e("div",{class:"highlighted"},"\xA0"),e("div",{class:"highlighted"},"\xA0"),e("br"),e("br"),e("br")]),e("pre",null,[e("code",null,`const [collect, drop] = useDrop({
  accept: 'Cell',
  collect: monitor => ({
    canDrop: monitor.canDrop(),
    hovered: monitor.isOver(),
  }),
})
`),e("div",{class:"m-mdic-copy-wrapper"},[e("div",{class:"u-mdic-copy-notify",id:"j-notify-1684197781157-56743"},"copy success"),e("button",{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":`const [collect, drop] = useDrop({
  accept: 'Cell',
  collect: monitor => ({
    canDrop: monitor.canDrop(),
    hovered: monitor.isOver(),
  }),
})
`,"data-mdic-attach-content":"","data-mdic-notify-id":"j-notify-1684197781157-56743","data-mdic-notify-delay":"2000","data-mdic-copy-fail-text":"copy fail",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"},"copy")])])],-1),r=n('<p><code>canDrop</code> indicates that the dragged element can be placed on the current element, <code>hovered</code> indicates that the dragged element is on the current element</p><h2 id="connectors" tabindex="-1">Connectors <a class="header-anchor" href="#connectors" aria-hidden="true">#</a></h2><p>Connectors allow you to connect a DOM element to one of the predefined roles in the backend (drag source <code>drag</code>, drag preview <code>dragPreview</code>, or drop target <code>drop</code>).</p><p>The connector function is available in our hooks, let&#39;s see how to use it to specify drop targets:</p>',4),l=e("div",{class:"language-vue"},[e("div",{class:"highlight-lines"},[e("br"),e("div",{class:"highlighted"},"\xA0"),e("br"),e("div",{class:"highlighted"},"\xA0"),e("br"),e("br"),e("br"),e("div",{class:"highlighted"},"\xA0"),e("br"),e("br")]),e("pre",null,[e("code",null,[e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"<"),t("script")]),t(),e("span",{class:"token attr-name"},"setup"),t(),e("span",{class:"token attr-name"},"lang"),e("span",{class:"token attr-value"},[e("span",{class:"token punctuation attr-equals"},"="),e("span",{class:"token punctuation"},'"'),t("ts"),e("span",{class:"token punctuation"},'"')]),e("span",{class:"token punctuation"},">")]),e("span",{class:"token script"},[e("span",{class:"token language-javascript"},[t(`
`),e("span",{class:"token keyword"},"import"),t(),e("span",{class:"token punctuation"},"{"),t(" useDrop "),e("span",{class:"token punctuation"},"}"),t(),e("span",{class:"token keyword"},"from"),t(),e("span",{class:"token string"},"'vue3-dnd'"),t(`

`),e("span",{class:"token keyword"},"const"),t(),e("span",{class:"token punctuation"},"["),e("span",{class:"token punctuation"},","),t(" drop"),e("span",{class:"token punctuation"},"]"),t(),e("span",{class:"token operator"},"="),t(),e("span",{class:"token function"},"useDrop"),e("span",{class:"token punctuation"},"("),e("span",{class:"token punctuation"},"{"),e("span",{class:"token punctuation"},"}"),e("span",{class:"token punctuation"},")"),t(`
`)])]),e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"</"),t("script")]),e("span",{class:"token punctuation"},">")]),t(`

`),e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"<"),t("template")]),e("span",{class:"token punctuation"},">")]),t(`
`),e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"<"),t("div")]),t(),e("span",{class:"token attr-name"},":ref"),e("span",{class:"token attr-value"},[e("span",{class:"token punctuation attr-equals"},"="),e("span",{class:"token punctuation"},'"'),t("drop"),e("span",{class:"token punctuation"},'"')]),e("span",{class:"token punctuation"},">")]),e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"</"),t("div")]),e("span",{class:"token punctuation"},">")]),t(`
`),e("span",{class:"token tag"},[e("span",{class:"token tag"},[e("span",{class:"token punctuation"},"</"),t("template")]),e("span",{class:"token punctuation"},">")]),t(`
`)]),e("div",{class:"m-mdic-copy-wrapper"},[e("div",{class:"u-mdic-copy-notify",id:"j-notify-1684197781158-69249"},"copy success"),e("button",{class:"u-mdic-copy-btn j-mdic-copy-btn","data-mdic-content":`<script setup lang="ts">
import { useDrop } from 'vue3-dnd'

const [, drop] = useDrop({})
<\/script>

<template>
<div :ref="drop"></div>
</template>
`,"data-mdic-attach-content":"","data-mdic-notify-id":"j-notify-1684197781158-69249","data-mdic-notify-delay":"2000","data-mdic-copy-fail-text":"copy fail",onclick:"!function(t){const e={copy:(t='',e='')=>new Promise((c,o)=>{const n=document.createElement('textarea'),d=e?`\\n\\n${e}`:e;n.value=`${t}${d}`,document.body.appendChild(n),n.select();try{const t=document.execCommand('copy');document.body.removeChild(n),t?c():o()}catch(t){document.body.removeChild(n),o()}}),btnClick(t){const c=t&&t.dataset?t.dataset:{},o=c.mdicNotifyId,n=document.getElementById(o),d=c.mdicNotifyDelay,i=c.mdicCopyFailText;e.copy(c.mdicContent,c.mdicAttachContent).then(()=>{n.style.display='block',setTimeout(()=>{n.style.display='none'},d)}).catch(()=>{alert(i)})}};e.btnClick(t)}(this);"},"copy")])])],-1),p=n('<p><code>drop</code> is a ref function, it can be called in many ways, we usually use it by using <code>v-bind:ref=&quot;drop&quot;</code> directly on the DOM node, it will tell DnD that the DOM is a valid drop node, and its hover and drop events are handled by the dnd backend.</p><h2 id="drag-sources-and-drop-targets" tabindex="-1">Drag Sources and Drop Targets <a class="header-anchor" href="#drag-sources-and-drop-targets" aria-hidden="true">#</a></h2><p>We use the drag source <code>dragSource</code> to represent the dragged element</p><p>We use the drop target <code>drop</code> to indicate that the target receives the dragged element</p><h2 id="backend" tabindex="-1">Backend <a class="header-anchor" href="#backend" aria-hidden="true">#</a></h2><p>Backend abstracts away browser differences and handles native DOM events. All Backend does is translate DOM events into internal Redux actions that React DnD can handle.</p><p>Benefiting from the design of React DnD, we can also directly adopt its <a href="https://www.npmjs.com/package/react-dnd-html5-backend" target="_blank" rel="noopener noreferrer">HTML5 Backend</a> , [Touch Backend](<a href="https://www" target="_blank" rel="noopener noreferrer">https://www</a> .npmjs.com/package/react-dnd-touch-backend) and <a href="https://www.npmjs.com/package/react-dnd-test-backend" target="_blank" rel="noopener noreferrer">Test Backend</a>, and even some custom backends</p><h2 id="in-conclusion" tabindex="-1">in conclusion <a class="header-anchor" href="#in-conclusion" aria-hidden="true">#</a></h2><p>We have described some of the core concepts of React DnD. For a more detailed introduction, please refer to <a href="https://react-dnd.github.io/react-dnd/docs/overview" target="_blank" rel="noopener noreferrer">React DnD Overview</a></p>',9),u=[i,d,r,l,p];function h(m,g,y,k,f,b){return s(),o("div",null,u)}var w=a(c,[["render",h]]);export{_ as __pageData,w as default};
